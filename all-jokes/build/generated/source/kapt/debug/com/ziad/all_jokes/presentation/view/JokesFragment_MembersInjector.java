// Generated by Dagger (https://dagger.dev).
package com.ziad.all_jokes.presentation.view;

import com.ziad.common_di.ViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class JokesFragment_MembersInjector implements MembersInjector<JokesFragment> {
  private final Provider<JokesPresenter> mPresenterProvider;

  private final Provider<ViewModelFactory> viewModelFactoryProvider;

  public JokesFragment_MembersInjector(Provider<JokesPresenter> mPresenterProvider,
      Provider<ViewModelFactory> viewModelFactoryProvider) {
    this.mPresenterProvider = mPresenterProvider;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<JokesFragment> create(Provider<JokesPresenter> mPresenterProvider,
      Provider<ViewModelFactory> viewModelFactoryProvider) {
    return new JokesFragment_MembersInjector(mPresenterProvider, viewModelFactoryProvider);}

  @Override
  public void injectMembers(JokesFragment instance) {
    injectMPresenter(instance, mPresenterProvider.get());
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.ziad.all_jokes.presentation.view.JokesFragment.mPresenter")
  public static void injectMPresenter(JokesFragment instance, JokesPresenter mPresenter) {
    instance.mPresenter = mPresenter;
  }

  @InjectedFieldSignature("com.ziad.all_jokes.presentation.view.JokesFragment.viewModelFactory")
  public static void injectViewModelFactory(JokesFragment instance,
      ViewModelFactory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
