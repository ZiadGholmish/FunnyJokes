// Generated by Dagger (https://dagger.dev).
package com.ziad.all_jokes.di;

import androidx.lifecycle.ViewModel;
import com.ziad.all_jokes.domain.repo.JokesRepository;
import com.ziad.all_jokes.domain.usecases.GetAllJokesUseCase;
import com.ziad.all_jokes.presentation.view.JokesFragment;
import com.ziad.all_jokes.presentation.view.JokesFragment_MembersInjector;
import com.ziad.all_jokes.presentation.view.JokesPresenter;
import com.ziad.all_jokes.presentation.view.JokesVM;
import com.ziad.all_jokes.presentation.view.JokesVM_Factory;
import com.ziad.analytics.di.AnalyticsApi;
import com.ziad.common_di.ViewModelFactory;
import com.ziad.db.di.DbApi;
import com.ziad.db.repo.interfaces.JokesRepo;
import com.ziad.favorites_core.di.CoreFavoritesApi;
import com.ziad.favorites_core.usecases.FavJokeUseCase;
import com.ziad.favorites_core.usecases.UnFavJokeUseCase;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAllJokesComponent implements AllJokesComponent {
  private Provider<JokesRepo> jokesRepoProvider;

  private Provider<JokesRepository> provideJokesRepo$all_jokes_debugProvider;

  private Provider<GetAllJokesUseCase> provideGetAllJokes$all_jokes_debugProvider;

  private Provider<FavJokeUseCase> favUseCaseProvider;

  private Provider<UnFavJokeUseCase> unFavUseCaseProvider;

  private Provider<JokesVM> jokesVMProvider;

  private DaggerAllJokesComponent(AllJokesModule allJokesModuleParam, DbApi dbApiParam,
      AnalyticsApi analyticsApi, CoreFavoritesApi coreFavoritesApiParam) {

    initialize(allJokesModuleParam, dbApiParam, analyticsApi, coreFavoritesApiParam);
  }

  public static AllJokesComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
      ) {
    return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(JokesVM.class, (Provider) jokesVMProvider);}

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

  @SuppressWarnings("unchecked")
  private void initialize(final AllJokesModule allJokesModuleParam, final DbApi dbApiParam,
      final AnalyticsApi analyticsApi, final CoreFavoritesApi coreFavoritesApiParam) {
    this.jokesRepoProvider = new com_ziad_db_di_DbApi_jokesRepo(dbApiParam);
    this.provideJokesRepo$all_jokes_debugProvider = AllJokesModule_ProvideJokesRepo$all_jokes_debugFactory.create(allJokesModuleParam, jokesRepoProvider);
    this.provideGetAllJokes$all_jokes_debugProvider = AllJokesModule_ProvideGetAllJokes$all_jokes_debugFactory.create(allJokesModuleParam, provideJokesRepo$all_jokes_debugProvider);
    this.favUseCaseProvider = new com_ziad_favorites_core_di_CoreFavoritesApi_favUseCase(coreFavoritesApiParam);
    this.unFavUseCaseProvider = new com_ziad_favorites_core_di_CoreFavoritesApi_unFavUseCase(coreFavoritesApiParam);
    this.jokesVMProvider = JokesVM_Factory.create(provideGetAllJokes$all_jokes_debugProvider, favUseCaseProvider, unFavUseCaseProvider);
  }

  @Override
  public void inject(JokesFragment jokesFragment) {
    injectJokesFragment(jokesFragment);}

  private JokesFragment injectJokesFragment(JokesFragment instance) {
    JokesFragment_MembersInjector.injectMPresenter(instance, new JokesPresenter());
    JokesFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  private static final class Builder implements AllJokesComponent.Builder {
    private DbApi dbApi;

    private AnalyticsApi analyticsApi;

    private CoreFavoritesApi coreFavoritesApi;

    @Override
    public Builder dbComponent(DbApi dbComponent) {
      this.dbApi = Preconditions.checkNotNull(dbComponent);
      return this;
    }

    @Override
    public Builder analyticsComponent(AnalyticsApi analyticsComponent) {
      this.analyticsApi = Preconditions.checkNotNull(analyticsComponent);
      return this;
    }

    @Override
    public Builder favoritesCore(CoreFavoritesApi coreFavoritesApi) {
      this.coreFavoritesApi = Preconditions.checkNotNull(coreFavoritesApi);
      return this;
    }

    @Override
    public AllJokesComponent build() {
      Preconditions.checkBuilderRequirement(dbApi, DbApi.class);
      Preconditions.checkBuilderRequirement(analyticsApi, AnalyticsApi.class);
      Preconditions.checkBuilderRequirement(coreFavoritesApi, CoreFavoritesApi.class);
      return new DaggerAllJokesComponent(new AllJokesModule(), dbApi, analyticsApi, coreFavoritesApi);
    }
  }

  private static class com_ziad_db_di_DbApi_jokesRepo implements Provider<JokesRepo> {
    private final DbApi dbApi;

    com_ziad_db_di_DbApi_jokesRepo(DbApi dbApi) {
      this.dbApi = dbApi;
    }

    @Override
    public JokesRepo get() {
      return Preconditions.checkNotNull(dbApi.jokesRepo(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_ziad_favorites_core_di_CoreFavoritesApi_favUseCase implements Provider<FavJokeUseCase> {
    private final CoreFavoritesApi coreFavoritesApi;

    com_ziad_favorites_core_di_CoreFavoritesApi_favUseCase(CoreFavoritesApi coreFavoritesApi) {
      this.coreFavoritesApi = coreFavoritesApi;
    }

    @Override
    public FavJokeUseCase get() {
      return Preconditions.checkNotNull(coreFavoritesApi.favUseCase(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_ziad_favorites_core_di_CoreFavoritesApi_unFavUseCase implements Provider<UnFavJokeUseCase> {
    private final CoreFavoritesApi coreFavoritesApi;

    com_ziad_favorites_core_di_CoreFavoritesApi_unFavUseCase(CoreFavoritesApi coreFavoritesApi) {
      this.coreFavoritesApi = coreFavoritesApi;
    }

    @Override
    public UnFavJokeUseCase get() {
      return Preconditions.checkNotNull(coreFavoritesApi.unFavUseCase(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
